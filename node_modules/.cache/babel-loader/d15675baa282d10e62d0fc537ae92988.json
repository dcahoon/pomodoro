{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\dylan\\\\CODE\\\\0-Notes\\\\module-files\\\\27_pomodoro-timer\\\\Project_Pomodoro_Timer_Qualified_1\\\\src\\\\pomodoro\\\\Pomodoro.js\";\nimport React, { useState } from \"react\";\nimport classNames from \"../utils/class-names\";\nimport useInterval from \"../utils/useInterval\";\nimport SessionView from \"./SessionView\";\nimport TimeSetters from \"./TimeSetters\"; // These functions are defined outside of the component to insure they do not have access to state\n// and are, therefore more likely to be pure.\n\n/**\n * Update the session state with new state after each tick of the interval.\n * @param prevState\n *  the previous session state\n * @returns\n *  new session state with timing information updated.\n */\n\nfunction nextTick(prevState) {\n  const timeRemaining = Math.max(0, prevState.timeRemaining - 1);\n  return { ...prevState,\n    timeRemaining\n  };\n}\n/**\n * Higher order function that returns a function to update the session state with the next session type upon timeout.\n * @param focusDuration\n *    the current focus duration\n * @param breakDuration\n *    the current break duration\n * @returns\n *  function to update the session state.\n */\n\n\nfunction nextSession(focusDuration, breakDuration) {\n  /**\n   * State function to transition the current session type to the next session. e.g. On Break -> Focusing or Focusing -> On Break\n   */\n  return currentSession => {\n    if (currentSession.label === \"Focusing\") {\n      return {\n        label: \"On Break\",\n        timeRemaining: breakDuration * 60\n      };\n    }\n\n    return {\n      label: \"Focusing\",\n      timeRemaining: focusDuration * 60\n    };\n  };\n}\n\nfunction Pomodoro() {\n  /* const initialUseState = {\n    isTimerRunning: false,\n    session: null,\n    focusDuration: 25,\n    breakDuration: 5,\n  }\n  const [pomodoroState, setPomodoroState] = useState(initialUseState) */\n  // Timer starts out paused\n  const [isTimerRunning, setIsTimerRunning] = useState(false); // The current session - null where there is no session running\n\n  const [session, setSession] = useState(null); // States for focus and break durations\n\n  const [focusDuration, setFocusDuration] = useState(25);\n  const [breakDuration, setBreakDuration] = useState(5);\n  /**\n   * Custom hook that invokes the callback function every second\n   *\n   * NOTE: You will not need to make changes to the callback function\n   */\n\n  useInterval(() => {\n    if (session.timeRemaining === 0) {\n      new Audio(\"https://bigsoundbank.com/UPLOAD/mp3/1482.mp3\").play();\n      return setSession(nextSession(focusDuration, breakDuration));\n    }\n\n    return setSession(nextTick);\n  }, isTimerRunning ? 1000 : null); // Handles change to focus time duration between 5 and 60\n\n  function changeFocus(increase) {\n    increase ? setFocusDuration(current => Math.min(current + 5, 60)) : setFocusDuration(current => Math.max(current - 5, 5));\n  } // Handles changes to break time between 1 and 15\n\n\n  function changeBreak(increase) {\n    increase ? setBreakDuration(current => Math.min(current + 1, 15)) : setBreakDuration(current => Math.max(current - 1, 1));\n  }\n  /**\n   * Called whenever the play/pause button is clicked.\n   */\n\n\n  function playPause() {\n    // When play/pause button is clicked, call setIsTimerRunning with a callback function\n    setIsTimerRunning(prevState => {\n      // Switch the state back and forth between true/false, default is false\n      const nextState = !prevState; // If next state is true, start a focus session\n\n      if (nextState) {\n        setSession(prevStateSession => {\n          // If the timer is starting and the previous session is null,\n          // start a focusing session.\n          if (prevStateSession === null) {\n            return {\n              label: \"Focusing\",\n              timeRemaining: focusDuration * 60\n            };\n          }\n\n          return prevStateSession;\n        });\n      } // If next state is false and the timer was running when clicked, return false\n\n\n      return nextState;\n    });\n  }\n\n  function handleStop() {\n    setIsTimerRunning(false);\n    setSession(null);\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"pomodoro\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(TimeSetters, {\n    focusDuration: focusDuration,\n    changeFocus: changeFocus,\n    breakDuration: breakDuration,\n    changeBreak: changeBreak,\n    isTimerRunning: isTimerRunning,\n    session: session,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"btn-group btn-group-lg mb-2\",\n    role: \"group\",\n    \"aria-label\": \"Timer controls\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    type: \"button\",\n    className: \"btn btn-primary\",\n    \"data-testid\": \"play-pause\",\n    title: \"Start or pause timer\",\n    onClick: playPause,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: classNames({\n      oi: true,\n      \"oi-media-play\": !isTimerRunning,\n      \"oi-media-pause\": isTimerRunning\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 15\n    }\n  })), /*#__PURE__*/React.createElement(\"button\", {\n    type: \"button\",\n    className: \"btn btn-secondary\",\n    \"data-testid\": \"stop\",\n    title: \"Stop the session\",\n    onClick: handleStop,\n    disabled: !session,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: \"oi oi-media-stop\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 15\n    }\n  }))))), /*#__PURE__*/React.createElement(SessionView, {\n    session: session,\n    focusDuration: focusDuration,\n    breakDuration: breakDuration,\n    isTimerRunning: isTimerRunning,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 7\n    }\n  })); // End Pomodoro function\n}\n\nexport default Pomodoro;","map":{"version":3,"sources":["C:/Users/dylan/CODE/0-Notes/module-files/27_pomodoro-timer/Project_Pomodoro_Timer_Qualified_1/src/pomodoro/Pomodoro.js"],"names":["React","useState","classNames","useInterval","SessionView","TimeSetters","nextTick","prevState","timeRemaining","Math","max","nextSession","focusDuration","breakDuration","currentSession","label","Pomodoro","isTimerRunning","setIsTimerRunning","session","setSession","setFocusDuration","setBreakDuration","Audio","play","changeFocus","increase","current","min","changeBreak","playPause","nextState","prevStateSession","handleStop","oi"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport classNames from \"../utils/class-names\";\nimport useInterval from \"../utils/useInterval\";\nimport SessionView from \"./SessionView\"\nimport TimeSetters from \"./TimeSetters\"\n\n// These functions are defined outside of the component to insure they do not have access to state\n// and are, therefore more likely to be pure.\n\n/**\n * Update the session state with new state after each tick of the interval.\n * @param prevState\n *  the previous session state\n * @returns\n *  new session state with timing information updated.\n */\nfunction nextTick(prevState) {\n  const timeRemaining = Math.max(0, prevState.timeRemaining - 1);\n  return {\n    ...prevState,\n    timeRemaining,\n  };\n}\n\n/**\n * Higher order function that returns a function to update the session state with the next session type upon timeout.\n * @param focusDuration\n *    the current focus duration\n * @param breakDuration\n *    the current break duration\n * @returns\n *  function to update the session state.\n */\nfunction nextSession(focusDuration, breakDuration) {\n  /**\n   * State function to transition the current session type to the next session. e.g. On Break -> Focusing or Focusing -> On Break\n   */\n  return (currentSession) => {\n    if (currentSession.label === \"Focusing\") {\n      return {\n        label: \"On Break\",\n        timeRemaining: breakDuration * 60,\n      };\n    }\n    return {\n      label: \"Focusing\",\n      timeRemaining: focusDuration * 60,\n    };\n  };\n}\n\nfunction Pomodoro() {\n  \n  /* const initialUseState = {\n    isTimerRunning: false,\n    session: null,\n    focusDuration: 25,\n    breakDuration: 5,\n  }\n  const [pomodoroState, setPomodoroState] = useState(initialUseState) */\n\n  // Timer starts out paused\n  const [isTimerRunning, setIsTimerRunning] = useState(false);\n  // The current session - null where there is no session running\n  const [session, setSession] = useState(null);\n\n  // States for focus and break durations\n  const [focusDuration, setFocusDuration] = useState(25)\n  const [breakDuration, setBreakDuration] = useState(5)\n\n  /**\n   * Custom hook that invokes the callback function every second\n   *\n   * NOTE: You will not need to make changes to the callback function\n   */\n  useInterval(() => {\n      if (session.timeRemaining === 0) {\n        new Audio(\"https://bigsoundbank.com/UPLOAD/mp3/1482.mp3\").play();\n        return setSession(nextSession(focusDuration, breakDuration));\n      }\n      return setSession(nextTick);\n    },\n    isTimerRunning ? 1000 : null\n  );\n\n  // Handles change to focus time duration between 5 and 60\n  function changeFocus(increase) {\n    increase \n      ? setFocusDuration((current) => Math.min(current + 5, 60)) \n      : setFocusDuration((current) => Math.max(current - 5, 5))\n  }\n\n  // Handles changes to break time between 1 and 15\n  function changeBreak(increase) {\n    increase\n      ? setBreakDuration((current) => Math.min(current + 1, 15))\n      : setBreakDuration((current) => Math.max(current - 1, 1))\n  }\n\n  /**\n   * Called whenever the play/pause button is clicked.\n   */\n  function playPause() {\n    // When play/pause button is clicked, call setIsTimerRunning with a callback function\n    setIsTimerRunning((prevState) => {\n      // Switch the state back and forth between true/false, default is false\n      const nextState = !prevState;      \n      // If next state is true, start a focus session\n      if (nextState) {\n        setSession((prevStateSession) => {\n          // If the timer is starting and the previous session is null,\n          // start a focusing session.\n          if (prevStateSession === null) {\n            return {\n              label: \"Focusing\",\n              timeRemaining: focusDuration * 60,\n            };\n          }\n          return prevStateSession;\n        });\n      }\n      // If next state is false and the timer was running when clicked, return false\n      return nextState;\n    });\n  }\n\n  function handleStop() {\n    setIsTimerRunning(false)\n    setSession(null)\n  }\n\n  return (\n    <div className=\"pomodoro\">\n      <TimeSetters \n        focusDuration={focusDuration} \n        changeFocus={changeFocus} \n        breakDuration={breakDuration} \n        changeBreak={changeBreak} \n        isTimerRunning={isTimerRunning} \n        session={session} \n      />\n      <div className=\"row\">\n        <div className=\"col\">\n          <div\n            className=\"btn-group btn-group-lg mb-2\"\n            role=\"group\"\n            aria-label=\"Timer controls\"\n          >\n            <button\n              type=\"button\"\n              className=\"btn btn-primary\"\n              data-testid=\"play-pause\"\n              title=\"Start or pause timer\"\n              onClick={playPause}\n            >\n              <span\n                className={classNames({\n                  oi: true,\n                  \"oi-media-play\": !isTimerRunning,\n                  \"oi-media-pause\": isTimerRunning,\n                })}\n              />\n            </button>\n            <button\n              type=\"button\"\n              className=\"btn btn-secondary\"\n              data-testid=\"stop\"\n              title=\"Stop the session\"\n              onClick={handleStop}\n              disabled={!session}\n            >\n              <span className=\"oi oi-media-stop\" />\n            </button>\n          \n          </div>\n        </div>\n      </div>\n      <SessionView \n        session={session}  \n        focusDuration={focusDuration} \n        breakDuration={breakDuration} \n        isTimerRunning={isTimerRunning} \n      />\n    </div>\n  ); // End Pomodoro function\n}\n\nexport default Pomodoro;"]},"metadata":{},"sourceType":"module"}